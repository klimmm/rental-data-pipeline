name: Data Pipeline

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Scraper mode'
        required: false
        default: 'update'
        type: choice
        options:
          - new
          - update
          - revise
      search:
        description: 'Search config'
        required: false
        default: 'wide'
        type: choice
        options:
          - narrow
          - wide

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: '.github/requirements-workflow-data-pipeline.txt'

    - name: Install Python dependencies
      run: |
        pip install -r .github/requirements-workflow-data-pipeline.txt

    - name: Test imports
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from parse_data import ScraperPipeline
            print('‚úÖ Successfully imported ScraperPipeline')
        except ImportError as e:
            print(f'‚ùå Import failed: {e}')
            sys.exit(1)
        "

    - name: List directory structure
      run: |
        echo "üìÅ Repository structure:"
        find . -type f -name "*.py" | head -20
        echo "üìÅ Search configs:"
        ls -la search_configs/ || echo "No search_configs directory"
        echo "üìÅ Data process utils:"
        ls -la data_process_utils/ || echo "No data_process_utils directory"

  health-check:
    runs-on: ubuntu-latest
    needs: test-pipeline
    if: always()
    
    steps:
    - name: Report pipeline status
      run: |
        if [ "${{ needs.test-pipeline.result }}" = "success" ]; then
          echo "‚úÖ Data pipeline test completed successfully"
        else
          echo "‚ùå Data pipeline test failed"
          echo "Job result: ${{ needs.test-pipeline.result }}"
        fi