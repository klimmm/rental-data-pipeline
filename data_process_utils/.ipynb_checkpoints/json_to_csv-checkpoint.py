#!/usr/bin/env python3
import csv
from data_process_utils.csv_fieldnames import fieldnames


def transform_listing(listing):
    """Transform a single listing to match the original CSV structure"""
    row = {}

    for field in fieldnames:
        row[field] = ""

    # Basic fields
    row["offer_id"] = listing.get("offer_id", "")
    row["title"] = listing.get("title", "")
    row["description"] = listing.get("description", "")
    row["distance"] = listing.get("distance", "")
    row["price_value"] = listing.get("offer_price", "")
    row["estimated_price"] = listing.get("estimated_price", "")
    row["offer_url"] = listing.get("offer_url", "")
    row["price_change_value"] = listing.get("price_change_value", "")
    row["price_change_date"] = listing.get("price_change_date", "")

    # Metadata fields
    metadata = listing.get("metadata", {})
    row["publication_date"] = metadata.get("publication_date", "")
    row["last_active"] = metadata.get("last_active", "")
    row["unpublished_date"] = metadata.get("unpublished_date", "")

    # Get pre-computed metadata fields
    row["total_views"] = metadata.get("total_views", "")
    row["today_views"] = metadata.get("today_views", "")
    row["unique_views"] = metadata.get("unique_views", "")
    row["status"] = metadata.get("status", "")

    # Geo fields
    geo = listing.get("geo", {})
    row["address"] = geo.get("address", "")
    row["district"] = geo.get("district", "")
    row["neighborhood"] = geo.get("neighborhood", "")
    row["metro_station"] = geo.get("metro_station", "")

    # Rental terms - ensure numeric consistency
    rental = listing.get("rental_terms", {})
    row["utilities_payment"] = rental.get("–û–ø–ª–∞—Ç–∞ –ñ–ö–•", "")
    row["security_deposit"] = rental.get("–ó–∞–ª–æ–≥", "")
    row["commission"] = rental.get("–ö–æ–º–∏—Å—Å–∏—è", "")
    row["prepayment"] = rental.get("–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", "")
    row["rental_period"] = rental.get("–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã", "")
    row["living_conditions"] = rental.get("–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", "")

    # Apartment details
    apartment = listing.get("apartment", {})
    row["apartment_type"] = apartment.get("–¢–∏–ø –∂–∏–ª—å—è", "")
    row["total_area"] = apartment.get("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å", "")
    row["living_area"] = apartment.get("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å", "")
    row["kitchen_area"] = apartment.get("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏", "")
    row["bathroom"] = apartment.get("–°–∞–Ω—É–∑–µ–ª", "")
    row["renovation"] = apartment.get("–†–µ–º–æ–Ω—Ç", "")
    row["balcony"] = apartment.get("–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è", "")
    row["layout"] = apartment.get("–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞", "")
    row["ceiling_height"] = apartment.get("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤", "")
    row["view"] = apartment.get("–í–∏–¥ –∏–∑ –æ–∫–æ–Ω", "")
    row["sleeping_places"] = apartment.get("–°–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç", "")
    row["floor"] = apartment.get("floor", "")
    row["total_floors"] = apartment.get("total_floors", "")
    row["room_count"] = apartment.get("room_count", "")

    # Building details
    building = listing.get("building", {})
    row["elevators"] = building.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤", "")
    row["parking"] = building.get("–ü–∞—Ä–∫–æ–≤–∫–∞", "")
    row["year_built"] = building.get("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", "")
    row["building_type"] = building.get("–¢–∏–ø –¥–æ–º–∞", "")
    row["building_series"] = building.get("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è", "")
    row["ceiling_type"] = building.get("–¢–∏–ø –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π", "")
    row["heating"] = building.get("–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "")
    row["gas_supply"] = building.get("–ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "")
    row["garbage_chute"] = building.get("–ú—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥", "")
    row["emergency"] = building.get("–ê–≤–∞—Ä–∏–π–Ω–æ—Å—Ç—å", "")
    row["entrances"] = building.get("–ü–æ–¥—ä–µ–∑–¥—ã", "")

    # Features - set boolean fields
    features = listing.get("features", [])
    row["has_refrigerator"] = "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫" in features
    row["has_dishwasher"] = "–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞" in features
    row["has_washing_machine"] = "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞" in features
    row["has_air_conditioner"] = "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä" in features
    row["has_internet"] = "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç" in features
    row["has_bathtub"] = "–í–∞–Ω–Ω–∞" in features
    row["has_room_furniture"] = "–ú–µ–±–µ–ª—å –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö" in features
    row["has_tv"] = "–¢–µ–ª–µ–≤–∏–∑–æ—Ä" in features
    row["has_kitchen_furniture"] = "–ú–µ–±–µ–ª—å –Ω–∞ –∫—É—Ö–Ω–µ" in features
    row["has_shower_cabin"] = "–î—É—à–µ–≤–∞—è –∫–∞–±–∏–Ω–∞" in features

    return row


def convert_json_to_csv(output_file, listings):
    """
    Convert JSON listings to CSV format.

    Args:
        output_file (str, optional): Path to output CSV file
        listings (list, optional): Pre-loaded listings data

    Returns:
        bool: True if successful, False otherwise
    """
    # Set default paths if not provided

    print(f"Using provided listings data: {len(listings)} listings")

    try:
        # Transform all listings to CSV format
        transformed_listings = []
        for listing in listings:
            transformed = transform_listing(listing)
            transformed_listings.append(transformed)

        # Write to CSV
        print(f"Writing CSV to: {output_file}")
        with open(output_file, "w", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(transformed_listings)

        print(f"‚úÖ Successfully converted {len(transformed_listings)} listings to CSV")
        print(f"üìÑ Output file: {output_file}")
        return True

    except Exception as e:
        print(f"‚ùå Error during conversion: {e}")
        return False


def main():
    """Main function for command line usage"""
    return convert_json_to_csv()


if __name__ == "__main__":
    main()
